package algo.util;

public final class Numbers {

    /**
     * Конвертирует число в его представление в десятичной системе счисления в другую систему счисления.
     * <p>
     * Алгоритм такой: пока результат целочисленного деления на radix не равен нулю выполняем
     * целочисленное деление на radix и записываем остатки от деления.
     * <p>
     * Например, переведем 10 в двоичную систему:
     * 10 % 2 == 0; => 5 (результат от целочисленного деления на 2)
     * 5 % 2 == 1; => 2
     * 2 % 2 == 0; => 1
     * 1 % 2 == 1; => 0
     * <p>
     * Младший разряд сверху, старший внизу. Таким образом результат: 1010.
     *
     * @param n     конвертируемое число
     * @param radix основание системы счисления, в которую будем переводить
     * @return строковое представление числа в выбранной системе счисления
     */
    public static String convert(long n, long radix) {
        final StringBuilder stringBuilder = new StringBuilder();

        while (n > 0) {
            stringBuilder.append(n % radix);
            n = n / radix;
        }

        return stringBuilder.reverse().toString();
    }

    public static long convertFromBinary(String number) {
        // делаем развернутую запись числа
        // 1010 => 2^3 + 2^1 => 8 + 2 => 10
        // 1111 => 2^3 + 2^2 + 2^1 + 2^0 => 8 + 4 + 2 + 1 => 15

        return 0;
    }

    // из восьмеричной в двоичную переводим каждую цифру (по тройкам в двоичной)
    // 2377 (в восьмеричной) => 010 011 111 111 (ведущий ноль можно отбросить)

    // из шестнадцатеричной в двоичную тоже переводим каждую цифру (но уже по четверкам в двоичной)
    // a29 (в шестнадцатеричной) => 1010 0010 1001

    // для шестнадцатеричной используем четверки потому, что число 16 в двоичной – это 10000, а числа
    // 16 в шестнадцатеричной системе нет, так что максимальное число 15 – 1111


}
